<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32F1755_2755_DVB\Obj\HT32F1755_2755_DVB.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32F1755_2755_DVB\Obj\HT32F1755_2755_DVB.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Fri May 09 19:48:30 2014
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TP_Init &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[82]">LCD_Fill</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">LCD_Fill</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from ht32f175x_275x_it.o(i.ADC_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2a]">BFTM0_IRQHandler</a> from ht32f175x_275x_it.o(i.BFTM0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2b]">BFTM1_IRQHandler</a> from ht32f175x_275x_it.o(i.BFTM1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from ht32f175x_275x_it.o(i.BOD_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from ht32f175x_275x_it.o(i.BusFault_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from ht32f175x_275x_it.o(i.CKRDY_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[22]">COMP_IRQHandler</a> from ht32f175x_275x_it.o(i.COMP_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[40]">CSIF_IRQHandler</a> from ht32f175x_275x_it.o(i.CSIF_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from ht32f175x_275x_it.o(i.DebugMon_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[10]">EVWUP_IRQHandler</a> from ht32f175x_275x_it.o(i.EVWUP_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI10_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI11_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI12_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI13_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI14_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI15_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI2_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI3_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI4_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI5_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI6_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI7_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI8_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from ht32f175x_275x_it.o(i.EXTI9_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from ht32f175x_275x_it.o(i.FLASH_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[28]">GPTM0_IRQHandler</a> from ht32f175x_275x_it.o(i.GPTM0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[29]">GPTM1_IRQHandler</a> from ht32f175x_275x_it.o(i.GPTM1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f175x_275x_it.o(i.HardFault_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2c]">I2C0_IRQHandler</a> from ht32f175x_275x_it.o(i.I2C0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2d]">I2C1_IRQHandler</a> from ht32f175x_275x_it.o(i.I2C1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[11]">LPWUP_IRQHandler</a> from ht32f175x_275x_it.o(i.LPWUP_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from ht32f175x_275x_it.o(i.LVD_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[24]">MCTMBRK_IRQHandler</a> from ht32f175x_275x_it.o(i.MCTMBRK_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[27]">MCTMCC_IRQHandler</a> from ht32f175x_275x_it.o(i.MCTMCC_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[26]">MCTMTR_IRQHandler</a> from ht32f175x_275x_it.o(i.MCTMTR_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[25]">MCTMUP_IRQHandler</a> from ht32f175x_275x_it.o(i.MCTMUP_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from ht32f175x_275x_it.o(i.MemManage_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f175x_275x_it.o(i.NMI_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[34]">PDMA_CH0_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3e]">PDMA_CH10_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH10_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3f]">PDMA_CH11_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH11_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[35]">PDMA_CH1_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[36]">PDMA_CH2_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH2_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[37]">PDMA_CH3_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH3_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[38]">PDMA_CH4_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH4_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[39]">PDMA_CH5_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH5_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3a]">PDMA_CH6_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH6_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3b]">PDMA_CH7_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH7_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3c]">PDMA_CH8_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH8_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[3d]">PDMA_CH9_IRQHandler</a> from ht32f175x_275x_it.o(i.PDMA_CH9_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from ht32f175x_275x_it.o(i.PendSV_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[47]">Reset_Handler</a> from startup_ht32f175x_275x.o(RESET) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[32]">SCI_IRQHandler</a> from ht32f175x_275x_it.o(i.SCI_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2e]">SPI0_IRQHandler</a> from ht32f175x_275x_it.o(i.SPI0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from ht32f175x_275x_it.o(i.SPI1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from ht32f175x_275x_it.o(i.SVC_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from ht32f175x_275x_it.o(i.SysTick_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_ht32f175x_275x.o(i.SystemInit) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[46]">TP_Adjust</a> from touch.o(i.TP_Adjust) referenced from touch.o(.data)
 <LI><a href="#[44]">TP_Init</a> from touch.o(i.TP_Init) referenced from touch.o(.data)
 <LI><a href="#[45]">TP_Scan</a> from touch.o(i.TP_Scan) referenced from touch.o(.data)
 <LI><a href="#[30]">USART0_IRQHandler</a> from ht32f175x_275x_it.o(i.USART0_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from ht32f175x_275x_it.o(i.USART1_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[33]">USB_IRQHandler</a> from ht32f175x_275x_it.o(i.USB_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from ht32f175x_275x_it.o(i.UsageFault_Handler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from ht32f175x_275x_it.o(i.WDT_IRQHandler) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f175x_275x.o(RESET)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f175x_275x.o(RESET))

<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[109]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[10c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[10d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4a]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[d7]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Surround
</UL>

<P><STRONG><a name="[10e]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Surround
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Surround
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Surround
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Surround
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[110]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[111]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[4b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[54]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[5f]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[113]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>AFIO_GPCConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.AFIO_GPCConfig))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b1]"></a>AFIO_GPDConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.AFIO_GPDConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d6]"></a>AFIO_GPEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.AFIO_GPEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
</UL>

<P><STRONG><a name="[61]"></a>AT24CXX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 24cxx.o(i.AT24CXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[63]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_ReadLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
</UL>

<P><STRONG><a name="[64]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>

<P><STRONG><a name="[6a]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_WriteLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[6b]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
</UL>

<P><STRONG><a name="[2a]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.BFTM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.BFTM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.BOD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CKCU_APBPerip0ClockConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f175x_275x_ckcu.o(i.CKCU_APBPerip0ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faninit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerinit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[6f]"></a>CKCU_APBPerip1ClockConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f175x_275x_ckcu.o(i.CKCU_APBPerip1ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
</UL>

<P><STRONG><a name="[6d]"></a>CKCU_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys.o(i.CKCU_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKCU_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip1ClockConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>CKCU_GetClockReadyStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f175x_275x_ckcu.o(i.CKCU_GetClockReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[ef]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, ht32f175x_275x_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.CKRDY_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.COMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CSIF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.CSIF_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CovAD</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, 24bitad.o(i.CovAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CovAD &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCount
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Display</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, disp.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Display &rArr; Display_index1 &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_temp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menuseason
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menupeople
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index1
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
</UL>

<P><STRONG><a name="[7b]"></a>Display_index1</STRONG> (Thumb, 690 bytes, Stack size 48 bytes, disp.o(i.Display_index1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Display_index1 &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[7c]"></a>Display_index2</STRONG> (Thumb, 1448 bytes, Stack size 40 bytes, disp.o(i.Display_index2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Display_index2 &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Display_index3</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, disp.o(i.Display_index3))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Display_index3 &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[83]"></a>Display_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, disp.o(i.Display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Display_init &rArr; TEST_FONT6 &rArr; Test_Show_CH6_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT6
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT5
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT1
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Display_menu</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, disp.o(i.Display_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Display_menu &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
</UL>

<P><STRONG><a name="[78]"></a>Display_menupeople</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, disp.o(i.Display_menupeople))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Display_menupeople &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[79]"></a>Display_menuseason</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, disp.o(i.Display_menuseason))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Display_menuseason &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[7a]"></a>Display_temp</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, disp.o(i.Display_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Display_temp &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[8a]"></a>Display_update</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, disp.o(i.Display_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Display_update &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>

<P><STRONG><a name="[8b]"></a>Display_update1</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, disp.o(i.Display_update1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Display_update1 &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>

<P><STRONG><a name="[8c]"></a>Display_update2</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, disp.o(i.Display_update2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Display_update2 &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>

<P><STRONG><a name="[8d]"></a>Display_update3</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, disp.o(i.Display_update3))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Display_update3 &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>Draw_Circle</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, lcd.o(i.Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Draw_Circle &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[10]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EVWUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI11_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI12_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI13_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI8_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.EXTI9_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[98]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faninit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerinit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_DriveConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[99]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_OpenDrainConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_OpenDrainConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faninit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerinit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerinit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_WriteOutData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f175x_275x_gpio.o(i.GPIO_WriteOutData))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[28]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.GPTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GPTM0_IRQHandler &rArr; GPTM0_ISR &rArr; timermain &rArr; Display_update &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>GPTM0_ISR</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(i.GPTM0_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GPTM0_ISR &rArr; timermain &rArr; Display_update &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_GetIntStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ClearIntPendingBit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.GPTM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>GPTM1_ISR</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timer.o(i.GPTM1_ISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_GetIntStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ClearIntPendingBit
</UL>

<P><STRONG><a name="[92]"></a>GPTM_ClearIntPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f175x_275x_gptm.o(i.GPTM_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_ISR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_ISR
</UL>

<P><STRONG><a name="[e8]"></a>GPTM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f175x_275x_gptm.o(i.GPTM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[95]"></a>GPTM_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ht32f175x_275x_gptm.o(i.GPTM_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_APBPerip1Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[91]"></a>GPTM_GetIntStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f175x_275x_gptm.o(i.GPTM_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_ISR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_ISR
</UL>

<P><STRONG><a name="[e4]"></a>GPTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f175x_275x_gptm.o(i.GPTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[e3]"></a>GPTM_TimeBaseInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f175x_275x_gptm.o(i.GPTM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IIC_Ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[62]"></a>IIC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[9d]"></a>IIC_NAck</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[68]"></a>IIC_Read_Byte</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[66]"></a>IIC_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[65]"></a>IIC_Start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[69]"></a>IIC_Stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[67]"></a>IIC_Wait_Ack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c4]"></a>Is_Leap_Year</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[9e]"></a>KEY_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>KEY_Scan</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
</UL>

<P><STRONG><a name="[a1]"></a>LCD5310_init</STRONG> (Thumb, 28606 bytes, Stack size 24 bytes, lcd.o(i.LCD5310_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD5310_init &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[7e]"></a>LCD_Clear</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_temp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menuseason
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menupeople
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[aa]"></a>LCD_Display_Dir</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ac]"></a>LCD_DrawLine</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[8f]"></a>LCD_DrawPoint</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[81]"></a>LCD_DrawRectangle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd.o(i.LCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_DrawRectangle &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update3
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_temp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menuseason
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menupeople
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index1
</UL>

<P><STRONG><a name="[ad]"></a>LCD_Draw_Point1</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, chinese.o(i.LCD_Draw_Point1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH6_Font48
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH5_Font48
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH4_Font48
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH3_Font48
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH2_Font48
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH1_Font48
</UL>

<P><STRONG><a name="[82]"></a>LCD_Fill</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = LCD_Fill &rArr;  LCD_Fill (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index2
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update
</UL>

<P><STRONG><a name="[ae]"></a>LCD_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPDConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPCConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>LCD_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(i.LCD_Pow))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[a5]"></a>LCD_RD_DATA</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[a3]"></a>LCD_ReadReg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_ReadReg &rArr; LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[ab]"></a>LCD_Scan_Dir</STRONG> (Thumb, 1240 bytes, Stack size 32 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[a8]"></a>LCD_SetCursor</STRONG> (Thumb, 766 bytes, Stack size 48 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[b2]"></a>LCD_ShowChar</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[b3]"></a>LCD_ShowNum</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>

<P><STRONG><a name="[7f]"></a>LCD_ShowString</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update3
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_temp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menuseason
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menupeople
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>

<P><STRONG><a name="[80]"></a>LCD_ShowxNum</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowxNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index1
</UL>

<P><STRONG><a name="[a4]"></a>LCD_WR_REG</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[a9]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[a2]"></a>LCD_WriteReg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[b5]"></a>LED_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.LPWUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>LoadData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.LoadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoadData &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>MCTMBRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.MCTMBRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTMCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.MCTMCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTMTR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.MCTMTR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTMUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.MCTMUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i.NVIC_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH11_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH8_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH9_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PDMA_CH9_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>PWRCU_CheckReadyAccessed</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ht32f175x_275x_pwrcu.o(i.PWRCU_CheckReadyAccessed))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[b9]"></a>PWRCU_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f175x_275x_pwrcu.o(i.PWRCU_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c3]"></a>PWRCU_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f175x_275x_pwrcu.o(i.PWRCU_ReadBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[c8]"></a>PWRCU_WriteBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f175x_275x_pwrcu.o(i.PWRCU_WriteBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>RSTCU_APBPerip1Reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ht32f175x_275x_rstcu.o(i.RSTCU_APBPerip1Reset))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_DeInit
</UL>

<P><STRONG><a name="[c0]"></a>RTC_CMPCLRCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_CMPCLRCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[bd]"></a>RTC_ClockSourceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[104]"></a>RTC_Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[b8]"></a>RTC_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc.o(i.RTC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClockReadyStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSESMConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSECmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClockSourceConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CMPCLRCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[c1]"></a>RTC_Get</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_ReadBackupRegister
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>RTC_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[c6]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>RTC_Get_Week</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCompare
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_WriteBackupRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>RTC_IntConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[bb]"></a>RTC_LSECmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_LSECmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[ba]"></a>RTC_LSESMConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_LSESMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c9]"></a>RTC_Set</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCompare
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_WriteBackupRegister
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchanged
</UL>

<P><STRONG><a name="[c7]"></a>RTC_SetCompare</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>RTC_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f175x_275x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[72]"></a>ReadCount</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, 24bitad.o(i.ReadCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadCount
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
</UL>

<P><STRONG><a name="[32]"></a>SCI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.SCI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f175x_275x_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[ca]"></a>SaveData</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.SaveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SaveData &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchanged
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, system_ht32f175x_275x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TEST_FONT1</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chinese.o(i.TEST_FONT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEST_FONT1 &rArr; Test_Show_CH1_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH1_Font48
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[85]"></a>TEST_FONT2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chinese.o(i.TEST_FONT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEST_FONT2 &rArr; Test_Show_CH2_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH2_Font48
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[86]"></a>TEST_FONT3</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chinese.o(i.TEST_FONT3))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEST_FONT3 &rArr; Test_Show_CH3_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH3_Font48
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[87]"></a>TEST_FONT4</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chinese.o(i.TEST_FONT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEST_FONT4 &rArr; Test_Show_CH4_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH4_Font48
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[88]"></a>TEST_FONT5</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chinese.o(i.TEST_FONT5))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEST_FONT5 &rArr; Test_Show_CH5_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH5_Font48
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[89]"></a>TEST_FONT6</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chinese.o(i.TEST_FONT6))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TEST_FONT6 &rArr; Test_Show_CH6_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Show_CH6_Font48
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
</UL>

<P><STRONG><a name="[d1]"></a>TN9COV</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tn9.o(i.TN9COV))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TN9COV &rArr; TN_GetData_Target &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_ReadData
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN_GetData_Surround
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>TN9init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tn9.o(i.TN9init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TN9init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPEConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>TN_GetData_Surround</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, tn9.o(i.TN_GetData_Surround))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TN_GetData_Surround &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9COV
</UL>

<P><STRONG><a name="[d3]"></a>TN_GetData_Target</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tn9.o(i.TN_GetData_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TN_GetData_Target &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9COV
</UL>

<P><STRONG><a name="[d2]"></a>TN_ReadData</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tn9.o(i.TN_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TN_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9COV
</UL>

<P><STRONG><a name="[d8]"></a>TP_Adj_Info_Show</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, touch.o(i.TP_Adj_Info_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[46]"></a>TP_Adjust</STRONG> (Thumb, 1366 bytes, Stack size 80 bytes, touch.o(i.TP_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>TP_Drow_Touch_Point</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, touch.o(i.TP_Drow_Touch_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TP_Drow_Touch_Point &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[da]"></a>TP_Get_Adjdata</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, touch.o(i.TP_Get_Adjdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TP_Get_Adjdata &rArr; AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[44]"></a>TP_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, touch.o(i.TP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TP_Init &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>TP_Read_AD</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, touch.o(i.TP_Read_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TP_Read_AD &rArr; TP_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>

<P><STRONG><a name="[e0]"></a>TP_Read_XOY</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, touch.o(i.TP_Read_XOY))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>

<P><STRONG><a name="[dd]"></a>TP_Read_XY</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, touch.o(i.TP_Read_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[e1]"></a>TP_Read_XY2</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, touch.o(i.TP_Read_XY2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[dc]"></a>TP_Save_Adjdata</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, touch.o(i.TP_Save_Adjdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TP_Save_Adjdata &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[45]"></a>TP_Scan</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, touch.o(i.TP_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TP_Scan &rArr; TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>TP_Write_Byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, touch.o(i.TP_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TP_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>

<P><STRONG><a name="[cb]"></a>Test_Show_CH1_Font48</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, chinese.o(i.Test_Show_CH1_Font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_Show_CH1_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT1
</UL>

<P><STRONG><a name="[cc]"></a>Test_Show_CH2_Font48</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, chinese.o(i.Test_Show_CH2_Font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_Show_CH2_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT2
</UL>

<P><STRONG><a name="[cd]"></a>Test_Show_CH3_Font48</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, chinese.o(i.Test_Show_CH3_Font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_Show_CH3_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT3
</UL>

<P><STRONG><a name="[ce]"></a>Test_Show_CH4_Font48</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, chinese.o(i.Test_Show_CH4_Font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_Show_CH4_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT4
</UL>

<P><STRONG><a name="[cf]"></a>Test_Show_CH5_Font48</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, chinese.o(i.Test_Show_CH5_Font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_Show_CH5_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT5
</UL>

<P><STRONG><a name="[d0]"></a>Test_Show_CH6_Font48</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, chinese.o(i.Test_Show_CH6_Font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_Show_CH6_Font48 &rArr; LCD_Draw_Point1 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point1
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FONT6
</UL>

<P><STRONG><a name="[e2]"></a>Timerx_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, timer.o(i.Timerx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Timerx_Init &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip1ClockConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_IntConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_Cmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>UR2_TX</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart.o(i.UR2_TX))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchanged
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>

<P><STRONG><a name="[30]"></a>USART0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ht32f175x_275x_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, ht32f175x_275x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USART1_IRQHandler &rArr; Display_update3 &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR2_TX
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update3
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchanged
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>USART_FIFOReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_FIFOReset))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[ee]"></a>USART_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ht32f175x_275x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Init &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[ea]"></a>USART_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR2_TX
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[f0]"></a>USART_Interrupt_Init</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, usart.o(i.USART_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TFITLConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RFITLConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FIFOReset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[f4]"></a>USART_RFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_RFITLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[ec]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>USART_RxCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_RxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[eb]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>USART_TFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_TFITLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[f3]"></a>USART_TxCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f175x_275x_usart.o(i.USART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[33]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.USB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f175x_275x_it.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f175x_275x.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[115]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[116]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[105]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[f9]"></a>buzzerinit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, buzzer.o(i.buzzerinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buzzerinit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>configchanged</STRONG> (Thumb, 1338 bytes, Stack size 48 bytes, timer.o(i.configchanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = configchanged &rArr; SaveData &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR2_TX
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
</UL>

<P><STRONG><a name="[fa]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>delay_ms</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD5310_init
</UL>

<P><STRONG><a name="[9a]"></a>delay_us</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>

<P><STRONG><a name="[fc]"></a>faninit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fan.o(i.faninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = faninit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>fanoff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fan.o(i.fanoff))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>

<P><STRONG><a name="[106]"></a>fanon</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fan.o(i.fanon))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timermain
</UL>

<P><STRONG><a name="[fd]"></a>initAD</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, 24bitad.o(i.initAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initAD
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPEConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>keyfind</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.keyfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = keyfind &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchkey
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configchanged
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_menu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; keyfind &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAD
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faninit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerinit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TN9COV
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_index2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovAD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[101]"></a>rtc_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtc.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtc_init &rArr; RTC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip1ClockConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_WriteBackupRegister
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_ReadBackupRegister
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_CheckReadyAccessed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[93]"></a>timermain</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, timer.o(i.timermain))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = timermain &rArr; Display_update &rArr; LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR2_TX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanon
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanoff
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_update
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_ISR
</UL>

<P><STRONG><a name="[ff]"></a>touchkey</STRONG> (Thumb, 890 bytes, Stack size 36 bytes, key.o(i.touchkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchkey
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyfind
</UL>

<P><STRONG><a name="[102]"></a>usart_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart_init &rArr; USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPCConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f8]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[f6]"></a>NVIC_EncodePriority</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, usart.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[f7]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[e7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_EncodePriority</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, timer.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[e6]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
